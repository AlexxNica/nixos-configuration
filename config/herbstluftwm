#! /usr/bin/env bash

hc() {
    herbstclient "$@"
}

keybind_with_refresh() {
    kbd="$1"
    shift
    cmd="$@"
    echo hc keybind "$kbd" chain ,,, $cmd ,,, spawn killall -SIGUSR1 i3status
    hc keybind "$kbd" chain ,,, $cmd ,,, spawn killall -SIGUSR1 i3status
}

hc emit_hook reload

# remove all existing keybindings
hc keyunbind --all

Mod=Mod4 # Use the super key as the main modifier

hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-q close

# all directional operations
for tuple in n,left e,down i,up o,right
do
    # http://stackoverflow.com/questions/9713104/loop-over-tuples-in-bash
    OLDIFS=$IFS; IFS=','; set -- $tuple; IFS=$OLDIFS
    hc keybind $Mod-$1         focus  $2
    hc keybind $Mod-Shift-$1   shift  $2
    hc keybind $Mod-Control-$1 resize $2 +0.05
done;

# splitting frames
hc keybind $Mod-h split bottom 0.5
hc keybind $Mod-v split right  0.5
hc keybind $Mod-x split explode

hc keybind $Mod-Return spawn emacsclient -c -e '(shell)'
hc keybind $Mod-Shift-Return spawn urxvt
hc keybind $Mod-s spawn rofi -show run

keybind_with_refresh F3 spawn pactl set-sink-volume @DEFAULT_SINK@ +5%
keybind_with_refresh F2 spawn pactl set-sink-volume @DEFAULT_SINK@ -5%
keybind_with_refresh F1 spawn pactl set-sink-mute   @DEFAULT_SINK@ toggle

hc keybind $Mod-grave       spawn        toggle-invert
hc keybind $Mod-Shift-grave spawn global-toggle-invert

# tags
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" 2>/dev/null || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

# layouting
hc keybind $Mod-r remove
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle
# The following cycles through the available layouts within a frame,
# but skips layouts, if the layout change wouldn't affect the actual
# window positions.  I.e. if there are two windows within a frame, the
# grid layout is skipped.
hc keybind $Mod-space                                                         \
            or , and . compare tags.focus.curframe_wcount = 2                 \
                     . cycle_layout +1 vertical horizontal max vertical grid  \
               , cycle_layout +1

# focus
hc keybind $Mod-BackSpace   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#222222'
hc set frame_border_normal_color '#101010'
hc set frame_bg_normal_color '#565656'
hc set frame_bg_active_color '#345F0C'
hc set frame_border_width 1
hc set always_show_frame 1
hc set frame_bg_transparent 1
hc set frame_transparent_width 5
hc set frame_gap 4

hc attr theme.active.color '#9fbc00'
hc attr theme.normal.color '#454545'
hc attr theme.urgent.color orange
hc attr theme.inner_width 1
hc attr theme.inner_color black
hc attr theme.border_width 3
hc attr theme.floating.border_width 4
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#3E4A00'
hc attr theme.active.outer_color '#3E4A00'
hc attr theme.background_color '#141414'

hc set window_gap 1
hc set frame_padding 1
hc set smart_window_surroundings 1
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0

# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# unlock, just to be sure
hc unlock

herbstclient set tree_style '╾│ ├└╼─┐'

herbstclient detect_monitors

killall dzen2 2>/dev/null || true
/etc/xdg/herbstluftwm/panel.sh &

# i3status -c /etc/i3/status | while :
# do
#     read line
#     IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
#     visible=true
#     date=""
#     windowtitle=""
#     ### Output ###
#     # This part prints dzen data based on the _previous_ data handling run,
#     # and then waits for the next event to happen.
#
#     bordercolor="#26221C"
#     separator="^bg()^fg($selbg)|"
#     # draw tags
#     for i in "${tags[@]}" ; do
#         case ${i:0:1} in
#             '#')
#                 echo -n "^bg($selbg)^fg($selfg)"
#                 ;;
#             '+')
#                 echo -n "^bg(#9CA668)^fg(#141414)"
#                 ;;
#             ':')
#                 echo -n "^bg()^fg(#ffffff)"
#                 ;;
#             '!')
#                 echo -n "^bg(#FF0675)^fg(#141414)"
#                 ;;
#             *)
#                 echo -n "^bg()^fg(#ababab)"
#                 ;;
#         esac
#         echo -n " ${i:1} "
#     done
#     echo "$line" || exit 1
# done |
#     dzen2 -ta r -fn "pango:DejaVu Sans Mono 8" &

gpg-connect-agent /bye
export GPG_TTY=$(tty)
xrdb /etc/X11/xresources

# these two are obviously hacks
sudo systemctl start openvpn-thufir &
